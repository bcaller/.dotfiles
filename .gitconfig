[user]
    email = bcaller@users.noreply.github.com
    name = bcaller
[alias]
    branch-name = "!git rev-parse --abbrev-ref HEAD"
    st = status

    ci = commit
    cin = commit --no-verify
    cia = commit --all
    ciaa = commit --all --amend
    ciaano = commit --all --amend --no-verify --no-edit
    ciamno = commit --amend --no-verify --no-edit
    ciam = commit --amend
    cxx = "!BRNM=$(git branch-name)&&git add -p && git ciam && git cm && git co $BRNM && git rebase master"

    chp = cherry-pick
    # shows diff next to commits in log
    file = log --pretty=format:'%Cred%h%Creset%C(yellow)%d %C(white ul)%s%Creset%n%C(bold blue)  <%an> %Creset%Cgreen(%cd)%Creset%n%w(0,4,4)%b%Creset' --abbrev-commit --date=format:'%a %x %H:%M' -p --follow
    br = branch -vv
    # delete branch from local and remote repositories
    rmbr = !sh -c '(git branch -D $1 && false) || git push origin :$1 --no-verify' -
    mvbr = !sh -c 'BRNM=$(git branch-name) && (git branch -m $BRNM $1 || true) && git rmbr $BRNM && git push --set-upstream origin $1' -
    # Prints "graphical", compact branch history
    lg = log --pretty=format:'%Cred%h%Creset %C(bold blue)%an:%Creset%C(yellow)%d%Creset %s %Cgreen(%cd)%Creset' --abbrev-commit --date=relative
    lgn = "!git log --pretty=format:'%C(bold blue)%an:%Creset%C(yellow)%d%Creset %s %Cgreen(%cd)%Creset' --abbrev-commit --date=relative | nl -v0 -w2 -s'  ' | less"
    lgnn = "!git --no-pager log -n25 --pretty=format:'%C(bold blue)%an:%Creset%C(yellow)%d%Creset %s %Cgreen(%cd)%Creset' --abbrev-commit --date=relative | nl -v0 -w2 -s'  '"
    long = log --pretty=format:'%Cred%h%Creset%C(yellow)%d %C(white ul)%s%Creset%n%C(bold blue)  <%an> %Creset%Cgreen(%cd)%Creset%n%w(0,4,4)%b%Creset' --abbrev-commit --stat --date=format:'%a %x %H:%M'
    # Prints "graphical", compact all-branches history
    lga = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cd) %C(bold blue)<%an>%Creset' --abbrev-commit --all
    # Prints "graphical", not-that-compact history of current branch
    ll = log --graph --format=medium
    lme = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cd) %C(bold blue)<%an>%Creset' --abbrev-commit --author="caller" --first-parent
    ln = !git --no-pager long -n
    ds = diff --staged
    dss = diff --staged --stat
    dif = diff
    co = checkout
    #cm = "!git checkout master && git fetch --prune && git --no-pager lg ..origin/master && echo '' && git pull"
    cm = !sh -c 'MAIN_BRNM=$(git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@') && git checkout $MAIN_BRNM && git fetch --prune && git --no-pager lg "..origin/$MAIN_BRNM" && echo "" && git pull'
    cmr = "!BRNM=$(git branch-name) MAIN_BRNM=$(git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@') && git cm && git co $BRNM && git rebase $MAIN_BRNM"
    su = submodule update
    sui = submodule update --init
    who = log --pretty=format:'%C(bold blue)  %an %Creset%Cgreen(%cd)%Creset %C(white ul)%s%Creset' --date=format:'%a %x %H:%M' --follow

    pom = push origin master
    pbr = "!git push -u origin $(git branch-name) --no-verify"
    pff = push -f --no-verify
    pnn = push --no-verify
    # Push local branch to remote master
    pbmaster = "!git push origin $(git branch-name):master"

    end = rebase --continue
    rii = !sh -c 'MAIN_BRNM=$(git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@') && git rebase -i $MAIN_BRNM'
    fuck = rebase --abort
    rw = reword

    which = show --summary --pretty="" --stat
    whbr = !sh -c 'git diff --name-only master..."$0"'

    rhh = reset HEAD --hard
    unstage = reset HEAD
    unmodify = !git co HEAD -- "$@" && git reset HEAD -- "$@"
    uncommit = reset @^ --mixed
    killunstaged = checkout -- .

    fix = "!git ciaano && git pff"
    fixr = "!git ciaano && git cmr && git pff"

    # Borrowed from http://stackoverflow.com/questions/9651898/is-there-a-git-sed-or-equivalent/9652183#9652183
    sed = ! git grep -z --full-name -l '.' | xargs -0 sed -i -e

    # Common typos
    lfg = lg
    shwo = show

[log]
    date = iso
[color]
    diff = auto
    status = auto
    branch = auto
    interactive = auto
    ui = true
    pager = true
[push]
    default = simple
[core]
    # LF line ends always and everywhere
    autocrlf = input
    editor = vim
    excludesfile = ~/.gitignore_global
    pager = diff-so-fancy | less --tabs=4 -RFX
[apply]
    whitespace = nowarn
[branch]
    autosetuprebase = always
[rerere]
    # very useful (and dangerous as well) - remembers conflict resolutions
    # so when you have similar conflict in the future it solves it for you
    enabled = 0
[gui]
    warndetachedcommit = true
    pruneduringfetch = true
[help]
    autocorrect = 50
[merge]
    tool = meld
[pager]
    log = perl /usr/share/doc/git/contrib/diff-highlight/diff-highlight | less
    show = diff-so-fancy | less --tabs=1,5 -RFX
    diff = diff-so-fancy | less --tabs=1,5 -RFX
[rebase]
    autosquash = true
    autostash = true
    stat = true
[diff]
    renames = true
